#!rake

require 'rbconfig'
require 'rake/extensiontask'
require 'rake/clean'
require 'erb'

ARCH = Config::CONFIG['arch']
ARCHLIBDIR = LIBDIR + ARCH

NODE_TYPES = %w[audio bitmap curve geometry material object text]
NODE_TYPE_REGEX = %r{#{EXTDIR}/(#{Regexp.union(NODE_TYPES)})node\.c}
NODE_TYPE_SOURCE_PATHS = NODE_TYPES.
	collect {|nodetype| EXTDIR + "#{nodetype}node.c" }.
	collect {|path| path.to_s }
NODE_TYPE_SOURCES = Rake::FileList[ *NODE_TYPE_SOURCE_PATHS ]

NODE_TYPE_TEMPLATE = EXTDIR + 'nodeclass.template'

CLEAN.include( ARCHLIBDIR.to_s )


#####################################################################
###	T A S K S
#####################################################################

# Make both the default task and the spec task depend on building the extension
task :local => :compile
task :spec => :compile
namespace :spec do
    task :doc   => [ :compile ]
    task :quiet => [ :compile ]
    task :html  => [ :compile ]
    task :text  => [ :compile ]
end

desc "Clobber the existing source for the node classes and replace them with blank templated source."
task :remake_node_classes do
	log "This will REMOVE all the child node classes and replace it with blank templated source."
	ask_for_confirmation( "Are you sure you want to do this?" ) do
		FileUtils.rm_f( NODE_TYPE_SOURCES, :verbose => true )
	end
	Rake::Task[ :node_classes ].invoke
end

file *NODE_TYPE_SOURCES
task :node_classes => NODE_TYPE_SOURCES
task :compile => NODE_TYPE_SOURCES

### Generate a skeleton at +target+ for the specified +nodetype+ using the NODE_TYPE_TEMPLATE.
def gen_nodetype_source( nodetype, target )
	trace "nodetype is %p" % [ nodetype ]

	template = ERB.new( NODE_TYPE_TEMPLATE.read, nil, '<>' )
	sourcecode = template.result( binding() )

	File.open( target, File::EXCL|File::CREAT|File::WRONLY, 0644 ) do |ofh|
		ofh.print( sourcecode )
	end
end

rule NODE_TYPE_REGEX => NODE_TYPE_TEMPLATE.to_s do |task|
	log "  creating %s from %s..." % [ task.name, NODE_TYPE_TEMPLATE ]
	task.name =~ NODE_TYPE_REGEX
	nodetype = $1 or abort "Ack! No nodetype?!?"
	gen_nodetype_source( nodetype, task.name )
end


Rake::ExtensionTask.new do |ext|
    ext.name = 'verse_ext'
    ext.gem_spec = GEMSPEC
    ext.ext_dir = EXTDIR.to_s
    ext.lib_dir = ARCHLIBDIR.to_s
	ext.source_pattern = "*.{c,h}"
	ext.cross_compile = true
	ext.cross_platform = %w[i386-mswin32 i386-mingw32]
end


# Make both the default task and the spec task depend on building the extension
namespace :spec do

	desc "Run specs under gdb"
	task :gdb => [ :compile ] do |task|
		require 'tempfile'

	    cmd_parts = ['run']
	    cmd_parts << '-Ilib:ext'
	    cmd_parts << '/usr/bin/spec'
	    cmd_parts += SPEC_FILES.collect { |fn| %["#{fn}"] }
	    cmd_parts += COMMON_SPEC_OPTS + ['-f', 's', '-c']

		script = Tempfile.new( 'spec-gdbscript' )
		script.puts( cmd_parts.join(' ') )
		script.flush

		run 'gdb', '-x', script.path, RUBY
	end
end



